import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Stack;

public class ExpressionAddOperators {
	public static void main(String[] args) {
		/*
		 *"1000000009"
9*/
		System.out.println(addOperators("1000000009", 9));
//		String[] output={"1-2-3*4-5-6+78-9","1-2-3*4+5+6+7*8-9","1-2-3+4-5+67-8-9","1-2-3+45-6-7+8+9","1-2-34-5+6+7+8*9","1-2-34+5+6+78-9","1-2-34+56+7+8+9","1-2*3-4-5-6-7+8*9","1-2*3-4-5-6+7*8+9","1-2*3-4-5+6*7+8+9","1-2*3-4+5*6+7+8+9","1-2*3*4-5-6+7+8*9","1-2*3*4+5-6+78-9","1-2*3+4*5-6*7+8*9","1-2*3+4*5+6+7+8+9","1-2*3+4+5-6+7*8-9","1-2*3+4+5+6*7+8-9","1-2*3+4+56+7-8-9","1-2*3+45-67+8*9","1-2+3-4*5-6+78-9","1-2+3-45+6-7+89","1-2+3*4*5-6-7+8-9","1-2+3+4-5*6+78-9","1-2+3+45+6-7+8-9","1-23-4-5-6-7+89","1-23-4+5+67+8-9","1-23*4+5+6*7+89","1-23+4-5+67-8+9","1-23+4*5-6*7+89","1-23+45-67+89","1*2-3-4*5+67+8-9","1*2-3-4+56-7-8+9","1*2-3*4+5+67-8-9","1*2-3+4-5-6*7+89","1*2-34+5*6+7*8-9","1*2*3-4*5-6-7+8*9","1*2*3-4*5-6+7*8+9","1*2*3-4*5+6*7+8+9","1*2*3-45+67+8+9","1*2*3*4*5-6-78+9","1*2*3*4+5+6-7+8+9","1*2*3+4-5*6-7+8*9","1*2*3+4-5*6+7*8+9","1*2*3+4+5-6*7+8*9","1*2*3+4+5+6+7+8+9","1*2+3-45+6+7+8*9","1*2+3*4-56+78+9","1*2+3+4-5-6+7*8-9","1*2+3+4-5+6*7+8-9","1*2+3+4+5*6+7+8-9","1*2+3+45+67-8*9","1*2+34-5+6+7-8+9","1*2+34-56-7+8*9","1*2+34-56+7*8+9","1*2+34+5-6-7+8+9","1*2+34+56-7*8+9","1*23-4+5*6-7-8+9","1*23*4-5-67+8+9","1*23+4*5-6+7+8-9","1*23+4*5+6-7-8+9","1*23+45-6*7+8+9","1+2-3-4-5*6+7+8*9","1+2-3-45-6+7+89","1+2-3*4-5-6-7+8*9","1+2-3*4-5-6+7*8+9","1+2-3*4-5+6*7+8+9","1+2-3*4*5+6+7+89","1+2-3*4+5*6+7+8+9","1+2-3+4*5+6*7-8-9","1+2-3+45-6+7+8-9","1+2-3+45+6-7-8+9","1+2-34-5-6+78+9","1+2-34+5+6-7+8*9","1+2-34+5+6+7*8+9","1+2*3-4-5-6*7+89","1+2*3*4-5+6*7-8-9","1+2*3*4*5+6+7-89","1+2*3*4+5*6+7-8-9","1+2*3+4*5-6+7+8+9","1+2*3+4*5*6+7-89","1+2*34-5-6*7+8+9","1+2+3-4*5-6-7+8*9","1+2+3-4*5-6+7*8+9","1+2+3-4*5+6*7+8+9","1+2+3-45+67+8+9","1+2+3*4*5+6-7-8-9","1+2+3*4+5+6*7-8-9","1+2+3+4-5*6-7+8*9","1+2+3+4-5*6+7*8+9","1+2+3+4+5-6*7+8*9","1+2+3+4+5+6+7+8+9","1+23-4-5-6*7+8*9","1+23-4-5+6+7+8+9","1+23-4*5-6+7*8-9","1+23-4*5+6*7+8-9","1+23-45+67+8-9","1+23*4-5-6*7+8-9","1+23*4-56+7-8+9","1+23*4+5-6-7*8+9","1+23+4-5-67+89","1+23+4-5*6+7*8-9","1+23+4+5+6+7+8-9","12-3-4-56+7+89","12-3-4+5*6-7+8+9","12-3-45-6+78+9","12-3*4-5+67-8-9","12-3*4*5+6+78+9","12-3+4*5+6-7+8+9","12-3+4+56-7-8-9","12*3-4-5-6+7+8+9","12*3-4-56+78-9","12*3*4-5*6-78+9","12*3+4+5-6+7+8-9","12*3+4+5+6-7-8+9","12+3-4*5+67-8-9","12+3-45+6+78-9","12+3*4+5+6-7+8+9","12+3*45-6*7-8*9","12+3+4-56-7+89","12+34-5-6-7+8+9"};
//		String[] expected={"1*2*3*4*5-6-78+9","1*2*3*4+5+6-7+8+9","1*2*3+4+5+6+7+8+9","1*2*3+4+5-6*7+8*9","1*2*3+4-5*6+7*8+9","1*2*3+4-5*6-7+8*9","1*2*3-4*5+6*7+8+9","1*2*3-4*5-6+7*8+9","1*2*3-4*5-6-7+8*9","1*2*3-45+67+8+9","1*2*34+56-7-8*9","1*2*34-5+6-7-8-9","1*2+3*4-56+78+9","1*2+3+4+5*6+7+8-9","1*2+3+4-5+6*7+8-9","1*2+3+4-5-6+7*8-9","1*2+3+45+67-8*9","1*2+3-45+6+7+8*9","1*2+34+5-6-7+8+9","1*2+34+56-7*8+9","1*2+34-5+6+7-8+9","1*2+34-56+7*8+9","1*2+34-56-7+8*9","1*2-3*4+5+67-8-9","1*2-3+4-5-6*7+89","1*2-3-4*5+67+8-9","1*2-3-4+56-7-8+9","1*2-34+5*6+7*8-9","1*23+4*5-6+7-8+9","1*23-4-56-7+89","1+2*3*4*5+6+7-89","1+2*3*4+5*6+7-8-9","1+2*3*4-5+6*7-8-9","1+2*3+4*5*6+7-89","1+2*3+4*5-6+7+8+9","1+2*3-4-5-6*7+89","1+2*34-5*6+7+8-9","1+2+3*4*5+6-7-8-9","1+2+3*4+5+6*7-8-9","1+2+3*45-6-78-9","1+2+3+4+5+6+7+8+9","1+2+3+4+5-6*7+8*9","1+2+3+4-5*6+7*8+9","1+2+3+4-5*6-7+8*9","1+2+3-4*5+6*7+8+9","1+2+3-4*5-6+7*8+9","1+2+3-4*5-6-7+8*9","1+2+3-45+67+8+9","1+2-3*4*5+6+7+89","1+2-3*4+5*6+7+8+9","1+2-3*4-5+6*7+8+9","1+2-3*4-5-6+7*8+9","1+2-3*4-5-6-7+8*9","1+2-3+4*5+6*7-8-9","1+2-3+45+6-7-8+9","1+2-3+45-6+7+8-9","1+2-3-4-5*6+7+8*9","1+2-3-45-6+7+89","1+2-34+5+6+7*8+9","1+2-34+5+6-7+8*9","1+2-34-5-6+78+9","1+23*4+5-6-7*8+9","1+23*4-5-6*7+8-9","1+23*4-56+7-8+9","1+23+4+5+6+7+8-9","1+23+4-5*6+7*8-9","1+23+4-5-67+89","1+23-4*5+6*7+8-9","1+23-4*5-6+7*8-9","1+23-4-5+6+7+8+9","1+23-4-5-6*7+8*9","1+23-45+67+8-9","1-2*3*4+5-6+78-9","1-2*3*4-5-6+7+8*9","1-2*3+4*5+6+7+8+9","1-2*3+4*5-6*7+8*9","1-2*3+4+5+6*7+8-9","1-2*3+4+5-6+7*8-9","1-2*3+4+56+7-8-9","1-2*3+45-67+8*9","1-2*3-4+5*6+7+8+9","1-2*3-4-5+6*7+8+9","1-2*3-4-5-6+7*8+9","1-2*3-4-5-6-7+8*9","1-2*34+5*6-7+89","1-2+3*4*5-6-7+8-9","1-2+3+4-5*6+78-9","1-2+3+45+6-7+8-9","1-2+3-4*5-6+78-9","1-2+3-45+6-7+89","1-2-3*4+5+6+7*8-9","1-2-3*4-5-6+78-9","1-2-3+4-5+67-8-9","1-2-3+45-6-7+8+9","1-2-34+5+6+78-9","1-2-34+56+7+8+9","1-2-34-5+6+7+8*9","1-23*4+5+6*7+89","1-23+4*5-6*7+89","1-23+4-5+67-8+9","1-23+45-67+89","1-23-4+5+67+8-9","1-23-4-5-6-7+89","12*3*4-5*6-78+9","12*3+4+5+6-7-8+9","12*3+4+5-6+7+8-9","12*3-4-5-6+7+8+9","12*3-4-56+78-9","12+3*4+5+6-7+8+9","12+3*45-6-7-89","12+3+4-56-7+89","12+3-4*5+67-8-9","12+3-45+6+78-9","12+34-5-6-7+8+9","12-3*4*5+6+78+9","12-3*4-5+67-8-9","12-3+4*5+6-7+8+9","12-3+4+56-7-8-9","12-3-4+5*6-7+8+9","12-3-4-56+7+89","12-3-45-6+78+9"};
//		Set<String> setOut=new HashSet<>();
//		Set<String> setExp=new HashSet<>();
//		for(String s:output){
//			setOut.add(s);
//		}
//		for(String s:expected){
//			setExp.add(s);
//		}
//		for(String s:setExp){
//			if(!setOut.contains(s)) System.out.println("1/"+s);
//		}
//		for(String s:setOut){
//			if(!setExp.contains(s)) System.out.println("2/"+s);
//		}
		
	}

	public static List<String> addOperators(String num, int target) {
		
		List<String> result = new ArrayList<>();
		if (num.length() == 0)
			return result;
		if (num.length() == 1 && Integer.valueOf(num) == target) {
			result.add(num);
			return result;
		}
		if(target==Integer.MIN_VALUE){
			if(Double.valueOf(num)==target){
				result.add(num);
			}
			return result;
		}
		Stack<String> stack = new Stack<>();
		helper(num, target, result, stack);
		return result;
	}

	private static boolean verifyResult(String s, int target) {

		Stack<Integer> number = new Stack<>();
		Stack<Character> signs = new Stack<>();
		signs.push('+');
		int index = 0;
		while (index < s.length()) {
			if (s.charAt(index) == '*') {
				int nextNum = s.charAt(++index) - '0';
				index++;
				while (index < s.length() && Character.isDigit(s.charAt(index))) {
					nextNum = 10 * nextNum + (s.charAt(index) - '0');
					index++;
				}
				number.push(number.pop() * nextNum);
			} else if (s.charAt(index) == '+' || s.charAt(index) == '-') {
				signs.push(s.charAt(index));
				index++;
			} else {
				int nextNum = s.charAt(index) - '0';
				index++;
				while (index < s.length() && Character.isDigit(s.charAt(index))) {
					nextNum = 10 * nextNum + (s.charAt(index) - '0');
					index++;
				}
				number.push(nextNum);
			}
		}
		int total = 0;
		while (!number.isEmpty()) {
			Character curSign = signs.pop();
			if (curSign == '+') {
				total += number.pop();
			} else {
				total -= number.pop();
			}
		}
		return total == target;

	}

	private static void helper(String s, int target, List<String> result, Stack<String> stack) {
		if (s.length() == 0) {
			String pop = stack.pop();
			pop = pop.substring(0, pop.length() - 1);
			if (verifyResult(pop, target)) {
				result.add(pop);
			}
			return;
		}

		String currentS = "";
		if (!stack.isEmpty()) {
			currentS = stack.pop();
		}

		for (int i = 0; i < s.length(); i++) {
			if (i == 1 && s.charAt(0) == '0')
				break;
			int currentNum = 0;
			for (int j = 0; j <= i; j++) {
				currentNum = 10 * currentNum + (s.charAt(j) - '0');
			}

			stack.push(currentS.concat(Integer.toString(currentNum)).concat("-"));
			helper(s.substring(i + 1), target, result, stack);
			if (i != s.length() - 1) {
				stack.push(currentS.concat(Integer.toString(currentNum)).concat("*"));
				helper(s.substring(i + 1), target, result, stack);
				stack.push(currentS.concat(Integer.toString(currentNum)).concat("+"));
				helper(s.substring(i + 1), target, result, stack);
			}
		}

	}
}
